# BookingChartDefragmenter Docker Compose Configuration
# For Debian 12 Linux Server Deployment

version: '3.8'

services:
  bookingchart-defragmenter:
    build: .
    container_name: bookingchart-defragmenter
    restart: unless-stopped
    
    # Environment variables (set these in .env file or override)
    environment:
      # RMS API Credentials (REQUIRED)
      - AGENT_ID=${AGENT_ID}
      - AGENT_PASSWORD=${AGENT_PASSWORD}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_PASSWORD=${CLIENT_PASSWORD}
      
      # Analysis Configuration
      - TARGET_PROPERTIES=${TARGET_PROPERTIES:-ALL}
      - ENABLE_EMAILS=${ENABLE_EMAILS:-false}
      - USE_TRAINING_DB=${USE_TRAINING_DB:-false}
      
      # Email Configuration (if enabled)
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SENDER_EMAIL=${SENDER_EMAIL:-***REMOVED***}
      - APP_PASSWORD=${APP_PASSWORD}
      - TEST_RECIPIENT=${TEST_RECIPIENT:-***REMOVED***}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    # Volumes for persistent data
    volumes:
      - ./logs:/var/log/bookingchart-defragmenter
      - ./output:/app/output
      - ./config:/app/config:ro  # Optional: mount config files
    
    # Network configuration
    networks:
      - defrag-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "python3", "-c", "import os; exit(0 if os.path.exists('/var/log/bookingchart-defragmenter/defrag_analyzer.log') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  defrag-network:
    driver: bridge
