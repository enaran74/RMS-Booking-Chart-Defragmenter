version: "3.8"

# Host network version for environments with networking conflicts (Tailscale, VPNs, etc.)
services:
  # RMS Defragmenter Web Application
  defrag-app:
    # Use prebuilt image but bind-mount code to avoid rebuilds over Tailscale
    image: enaran/rms-defragmenter:latest
    container_name: defrag-app
    restart: unless-stopped
    network_mode: host
    environment:
      - TZ=Australia/Sydney
      - DB_HOST=localhost
      - DB_PORT=5433
      - DB_NAME=${DB_NAME:-defrag_db}
      - DB_USER=${DB_USER:-defrag_user}
      - DB_PASSWORD=${DB_PASSWORD:-DefragDB2024!}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
      - AGENT_ID=${AGENT_ID}
      - AGENT_PASSWORD=${AGENT_PASSWORD}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_PASSWORD=${CLIENT_PASSWORD}
      - PROPERTY_REFRESH_INTERVAL_HOURS=${PROPERTY_REFRESH_INTERVAL_HOURS:-1}
    volumes:
      - defrag_logs:/app/logs
      - defrag_output:/app/output
      - ./app/static/uploads:/app/app/static/uploads
      # Timezone configuration
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # Bind-mount application code to avoid stale templates without rebuilding
      - ./app:/app/app
      - ./main.py:/app/main.py
      - ./defrag_analyzer.py:/app/defrag_analyzer.py
      - ./utils.py:/app/utils.py
      - ./holiday_client.py:/app/holiday_client.py
      - ./school_holiday_client.py:/app/school_holiday_client.py
      - ./school_holidays.json:/app/school_holidays.json
      - ./rms_client.py:/app/rms_client.py
      - ./excel_generator.py:/app/excel_generator.py
      - ./email_sender.py:/app/email_sender.py
      # Expose host .env into container so Setup can read it
      - /opt/defrag-app/.env:/app/.env
      - /opt/defrag-app/.env:/opt/defrag-app/.env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "./health_check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: defrag-postgres
    restart: unless-stopped
    network_mode: host
    environment:
      POSTGRES_DB: ${DB_NAME:-defrag_db}
      POSTGRES_USER: ${DB_USER:-defrag_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-DefragDB2024!}
      PGPORT: 5433
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-defrag_user} -d ${DB_NAME:-defrag_db} -p 5433"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
    driver: local
  defrag_logs:
    driver: local
  defrag_output:
    driver: local
